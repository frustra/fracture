// Code generated by protoc-gen-gogo.
// source: player.proto
// DO NOT EDIT!

package protobuf

import proto "code.google.com/p/gogoprotobuf/proto"
import json "encoding/json"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Player struct {
	Uuid             string  `protobuf:"bytes,1,req,name=uuid" json:"uuid"`
	Username         string  `protobuf:"bytes,2,opt,name=username" json:"username"`
	X                float64 `protobuf:"fixed64,3,opt,name=x" json:"x"`
	HeadY            float64 `protobuf:"fixed64,4,opt,name=headY" json:"headY"`
	FeetY            float64 `protobuf:"fixed64,5,opt,name=feetY" json:"feetY"`
	Z                float64 `protobuf:"fixed64,6,opt,name=z" json:"z"`
	OnGround         bool    `protobuf:"varint,7,opt,name=onGround" json:"onGround"`
	Pitch            float32 `protobuf:"fixed32,8,opt,name=pitch" json:"pitch"`
	Yaw              float32 `protobuf:"fixed32,9,opt,name=yaw" json:"yaw"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}

func (m *Player) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Player) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Player) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Player) GetHeadY() float64 {
	if m != nil {
		return m.HeadY
	}
	return 0
}

func (m *Player) GetFeetY() float64 {
	if m != nil {
		return m.FeetY
	}
	return 0
}

func (m *Player) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *Player) GetOnGround() bool {
	if m != nil {
		return m.OnGround
	}
	return false
}

func (m *Player) GetPitch() float32 {
	if m != nil {
		return m.Pitch
	}
	return 0
}

func (m *Player) GetYaw() float32 {
	if m != nil {
		return m.Yaw
	}
	return 0
}

func init() {
}
